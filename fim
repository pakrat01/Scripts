#!/bin/bash

# Author: Paul Marks
# Date: December 2021

# fim: Searches from the current or a specified directory for a file, opens the file in vim if it 
# is found.

# exit 1: usage error
# exit 2: invalid option
# exit 3: specified option exists, but has no functionality yet.

if [[ $# -lt 1 ]]; then
    echo "Usage: fim [option] [directory] <filename>"
    exit 1
fi

if [[ $# -gt 3 ]]; then
    echo "Usage: fim [option] [directory] <filename>"
    exit 1
fi

hlp () {
    echo "fim (Find and Vim)"
    echo -e "\nUSAGE:"
    echo -e "\tfim [OPTION] [DIRECTORY] <filename>" | expand -t4
    echo -e "\nOPTIONS:"
    echo -e "\t-a\t\t\t\tVim all matched files at the same time" | expand -t4
    echo -e "\t-a1\t\t\t\tVim all matched files one by one" | expand -t4
    echo -e "\t--help\t\t\tDisplay this menu" | expand -t4
    echo -e "\t--list\t\t\tList all options" | expand -t4
}

## options are checked here, and saved for later use if the option is valid, since other code has to 
## happen before the option matters, and there is no need for the program to do anything if an option 
## is invalid.
if [[ $# -ge 2 || ${1:0:2} == "--" ]]; then
    if [[ ${1:0:1} == "-" ]]; then
        case $1 in
            --list) echo "[-a] [-a1]"
                    echo "[--help] [--list]"
                    exit 0
                    ;;
            --help) hlp
                    exit 0
                    ;;
            -a)     option="$1" ;;
            -a1)    option="$1" ;;
            *)      echo "Invalid option: $1"
                    exit 2
                    ;;
        esac
        shift
    fi

    ## because of the nature of the current available options, it doesn't make sense to have more than 

    ## one option active at a time.
    if [[ ${1:0:1} == "-" ]]; then 
        echo "Only one option can be valid at a time."
        exit 1
    fi
fi

openFile () {
    read -rp "$1" num
    re='^[+-]?[0-9]+$'
    if ! [[ $num =~ $re ]]; then
        openFile "NAN, try again > "
    elif [[ $num -ge ${#matches[@]} ]]; then
        openFile "Invalid option, try again > "
    elif [[ $num -lt 0 ]]; then 
        true
    else
        vim "${matches[$num]}"
    fi
}

getFiles () {
    find $path -name $file 2>&1 | grep -v "Permission denied" | grep -q "$file"
    code="$?"
    if [[ "$code" -eq 0 ]]; then
        matches=()
        for line in $(find $path -name $file 2>&1 | grep -v "Permission denied"); do
            matches+=($line)
        done
    fi
}

## if one command line argument.
if [ "$#" -eq 1 ]; then
    path="./"
    file="$1"
else
    path="$1"
    file="$2"
fi

getFiles

## no reason to do anything if no files were found
if [[ $code -eq 0 ]]; then
    if [[ -z "$option" ]]; then
        count=0
        for match in "${matches[@]}"; do
            echo "$count) $match"
            ((count++))
        done
        openFile "Which file do you want to open? > "
        code="$num"
    elif [[ $option == "-a" ]]; then
        echo "-a doesn't work yet"
        exit 3
    elif [[ $option == "-a1" ]]; then
        echo "-a1 doesn't work yet"
        exit 3
    else 
        echo "Option found: $option. No functionality yet."
        exit 3
    fi
fi

if [[ "$code" -ne 0 ]]; then
    echo -n "File was not found, would you like to create file $file? (y/n) "
    read answer
    if [[ "$answer" == "y" ]]; then
        echo
        ini.sh "$file"
        if [[ "$?" -ne 0 ]]; then
            touch "$file"
        fi
    fi
fi
